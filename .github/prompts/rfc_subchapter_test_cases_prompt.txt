# rfc_subchapter_test_cases_prompt.txt
You are an expert HTTP/1.1 test case developer. Your task is to create or extend a subchapter test group for the h1spec project.

## Inputs:
- RFC Document: RFC{{PROTOCOL_NUM}}_{{MAJOR_SECTION}}_{{SUBSECTION}}
- RFC Link: {{RFC_LINK}}
- Test Case Name: {{TEST_CASE_NAME}}
- Test Case Description: {{TEST_CASE_DESCRIPTION}}
- Mode: {{MODE}}
- Sample Request: {{SAMPLE_REQUEST}}
- Expected Status Code: {{EXPECTED_STATUS_CODE}}
- Expected Headers: {{EXPECTED_HEADERS}}
- Expected Body: {{EXPECTED_BODY}}
- Parent Test Group: {{PARENT_TEST_GROUP}}

Project Context:
```go
{{REFERENCE_CODE}}
```

## Requirements:
- Create or extend the subchapter test group function.
- Implement the test case as described in the Test Case Details.
- Follow the project's coding style and use existing utility functions.
- Use the provided Mode (MUST, SHOULD, MAY) to set the test severity.
- Include clear comments explaining the test case and its behavior.
- Use 'c *config.Config' and 'conn *spec.Conn' as parameters for the Run function.
- Return a 'spec.TestError' for any test failures.

### Output Format:
Please generate the response in the following format:

Notes:

- Replace <SUBSECTION_TITLE> with the actual subsection title from the RFC.
- Replace <STRICTNESS> with true for MUST, and false for SHOULD or MAY.
- Replace <TEST_CASE_DESCRIPTION> with the provided Test Case Description.
- Replace <RFC_REQUIREMENT> with the specific requirement from the RFC.
- Ensure the filename uses lowercase for the test case group name.
- Implement the test case logic in the Run function, using the provided Sample Request, Expected Status Code, Headers, and Body.

```go
package http11

import (
    "github.com/LeaYeh/h1spec/config"
    "github.com/LeaYeh/h1spec/spec"
)

// {{PARENT_TEST_GROUP}} implements tests for RFC{{PROTOCOL_NUM}} Section {{MAJOR_SECTION}}.{{SUBSECTION}}: "<SUBSECTION_TITLE>".
func {{PARENT_TEST_GROUP}}() *spec.TestGroup {
    tg := NewTestGroup("RFC{{PROTOCOL_NUM}}.{{MAJOR_SECTION}}.{{SUBSECTION}}", "<SUBSECTION_TITLE>")
    
    tg.AddTestCase(&spec.TestCase{
        Strict:      <STRICTNESS>, // true or false, based on the Mode
        Desc:        "<TEST_CASE_DESCRIPTION>",
        Requirement: "<RFC_REQUIREMENT>",
        Run: func(c *config.Config, conn *spec.Conn) error {
            // Test implementation
            // ...
            return nil // or return &spec.TestError{...} if the test fails
        },
    })
    
    // Add more test cases if necessary
    
    return tg
}
```

```filename
e.g. RFC{{PROTOCOL_NUM}}_{MAJOR_SECTION}_{{SUBSECTION}}_<TEST_CASE_GROUP>.go
```

```test-group
EMPTY
```
